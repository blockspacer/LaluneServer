// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlserver/ControlServer.proto

#ifndef PROTOBUF_controlserver_2fControlServer_2eproto__INCLUDED
#define PROTOBUF_controlserver_2fControlServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace control_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controlserver_2fControlServer_2eproto();
void protobuf_AssignDesc_controlserver_2fControlServer_2eproto();
void protobuf_ShutdownFile_controlserver_2fControlServer_2eproto();

class Command;
class CommandResult;

// ===================================================================

class Command : public ::google_lalune::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string command_name = 1;
  inline bool has_command_name() const;
  inline void clear_command_name();
  static const int kCommandNameFieldNumber = 1;
  inline const ::std::string& command_name() const;
  inline void set_command_name(const ::std::string& value);
  inline void set_command_name(const char* value);
  inline void set_command_name(const char* value, size_t size);
  inline ::std::string* mutable_command_name();
  inline ::std::string* release_command_name();
  inline void set_allocated_command_name(::std::string* command_name);

  // repeated string args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:control_server.Command)
 private:
  inline void set_has_command_name();
  inline void clear_has_command_name();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* command_name_;
  ::google_lalune::protobuf::RepeatedPtrField< ::std::string> args_;
  friend void  protobuf_AddDesc_controlserver_2fControlServer_2eproto();
  friend void protobuf_AssignDesc_controlserver_2fControlServer_2eproto();
  friend void protobuf_ShutdownFile_controlserver_2fControlServer_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandResult : public ::google_lalune::protobuf::Message {
 public:
  CommandResult();
  virtual ~CommandResult();

  CommandResult(const CommandResult& from);

  inline CommandResult& operator=(const CommandResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CommandResult& default_instance();

  void Swap(CommandResult* other);

  // implements Message ----------------------------------------------

  CommandResult* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CommandResult& from);
  void MergeFrom(const CommandResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:control_server.CommandResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_;
  friend void  protobuf_AddDesc_controlserver_2fControlServer_2eproto();
  friend void protobuf_AssignDesc_controlserver_2fControlServer_2eproto();
  friend void protobuf_ShutdownFile_controlserver_2fControlServer_2eproto();

  void InitAsDefaultInstance();
  static CommandResult* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required string command_name = 1;
inline bool Command::has_command_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_command_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_command_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_command_name() {
  if (command_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_name_->clear();
  }
  clear_has_command_name();
}
inline const ::std::string& Command::command_name() const {
  // @@protoc_insertion_point(field_get:control_server.Command.command_name)
  return *command_name_;
}
inline void Command::set_command_name(const ::std::string& value) {
  set_has_command_name();
  if (command_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
  // @@protoc_insertion_point(field_set:control_server.Command.command_name)
}
inline void Command::set_command_name(const char* value) {
  set_has_command_name();
  if (command_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:control_server.Command.command_name)
}
inline void Command::set_command_name(const char* value, size_t size) {
  set_has_command_name();
  if (command_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:control_server.Command.command_name)
}
inline ::std::string* Command::mutable_command_name() {
  set_has_command_name();
  if (command_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:control_server.Command.command_name)
  return command_name_;
}
inline ::std::string* Command::release_command_name() {
  clear_has_command_name();
  if (command_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = command_name_;
    command_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Command::set_allocated_command_name(::std::string* command_name) {
  if (command_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_name_;
  }
  if (command_name) {
    set_has_command_name();
    command_name_ = command_name;
  } else {
    clear_has_command_name();
    command_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:control_server.Command.command_name)
}

// repeated string args = 2;
inline int Command::args_size() const {
  return args_.size();
}
inline void Command::clear_args() {
  args_.Clear();
}
inline const ::std::string& Command::args(int index) const {
  // @@protoc_insertion_point(field_get:control_server.Command.args)
  return args_.Get(index);
}
inline ::std::string* Command::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:control_server.Command.args)
  return args_.Mutable(index);
}
inline void Command::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:control_server.Command.args)
  args_.Mutable(index)->assign(value);
}
inline void Command::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:control_server.Command.args)
}
inline void Command::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:control_server.Command.args)
}
inline ::std::string* Command::add_args() {
  return args_.Add();
}
inline void Command::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:control_server.Command.args)
}
inline void Command::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:control_server.Command.args)
}
inline void Command::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:control_server.Command.args)
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::std::string>&
Command::args() const {
  // @@protoc_insertion_point(field_list:control_server.Command.args)
  return args_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:control_server.Command.args)
  return &args_;
}

// -------------------------------------------------------------------

// CommandResult

// required string result = 1;
inline bool CommandResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandResult::clear_result() {
  if (result_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& CommandResult::result() const {
  // @@protoc_insertion_point(field_get:control_server.CommandResult.result)
  return *result_;
}
inline void CommandResult::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:control_server.CommandResult.result)
}
inline void CommandResult::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:control_server.CommandResult.result)
}
inline void CommandResult::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:control_server.CommandResult.result)
}
inline ::std::string* CommandResult::mutable_result() {
  set_has_result();
  if (result_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:control_server.CommandResult.result)
  return result_;
}
inline ::std::string* CommandResult::release_result() {
  clear_has_result();
  if (result_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommandResult::set_allocated_result(::std::string* result) {
  if (result_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:control_server.CommandResult.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace control_server

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controlserver_2fControlServer_2eproto__INCLUDED
