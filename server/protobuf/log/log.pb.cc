// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log/log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kit {
namespace log {

namespace {

const ::google_lalune::protobuf::Descriptor* LexicalEntry_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LexicalEntry_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LogDetail_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LogDetail_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LogEvent_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LogEvent_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LogOption_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LogOption_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LogOptions_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LogOptions_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2flog_2eproto() {
  protobuf_AddDesc_log_2flog_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log/log.proto");
  GOOGLE_CHECK(file != NULL);
  LexicalEntry_descriptor_ = file->message_type(0);
  static const int LexicalEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, entry_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, d_),
  };
  LexicalEntry_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LexicalEntry_descriptor_,
      LexicalEntry::default_instance_,
      LexicalEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LexicalEntry, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LexicalEntry));
  LogDetail_descriptor_ = file->message_type(1);
  static const int LogDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDetail, entry_),
  };
  LogDetail_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LogDetail_descriptor_,
      LogDetail::default_instance_,
      LogDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDetail, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LogDetail));
  LogEvent_descriptor_ = file->message_type(2);
  static const int LogEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, index3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, data_),
  };
  LogEvent_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LogEvent_descriptor_,
      LogEvent::default_instance_,
      LogEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEvent));
  Login_descriptor_ = file->message_type(3);
  static const int Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LogOption_descriptor_ = file->message_type(4);
  static const int LogOption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, index3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, count_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, enable_detail_),
  };
  LogOption_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LogOption_descriptor_,
      LogOption::default_instance_,
      LogOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOption, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOption));
  LogOptions_descriptor_ = file->message_type(5);
  static const int LogOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, count_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, enable_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, log_option_),
  };
  LogOptions_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LogOptions_descriptor_,
      LogOptions::default_instance_,
      LogOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptions, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOptions));
  Query_descriptor_ = file->message_type(6);
  static const int Query_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, index3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, no_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, condition_clause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, is_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, limit_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, limit_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, password_),
  };
  Query_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(Query));
  QueryResult_descriptor_ = file->message_type(7);
  static const int QueryResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, log_event_),
  };
  QueryResult_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LexicalEntry_descriptor_, &LexicalEntry::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogDetail_descriptor_, &LogDetail::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEvent_descriptor_, &LogEvent::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOption_descriptor_, &LogOption::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOptions_descriptor_, &LogOptions::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_descriptor_, &Query::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_descriptor_, &QueryResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2flog_2eproto() {
  delete LexicalEntry::default_instance_;
  delete LexicalEntry_reflection_;
  delete LogDetail::default_instance_;
  delete LogDetail_reflection_;
  delete LogEvent::default_instance_;
  delete LogEvent_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LogOption::default_instance_;
  delete LogOption_reflection_;
  delete LogOptions::default_instance_;
  delete LogOptions_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
}

void protobuf_AddDesc_log_2flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlog/log.proto\022\007kit.log\"m\n\014LexicalEntry"
    "\022\022\n\nentry_name\030\002 \001(\t\022\022\n\nvalue_type\030\001 \002(\005"
    "\022\t\n\001u\030\003 \001(\004\022\t\n\001i\030\004 \001(\022\022\t\n\001s\030\005 \001(\t\022\t\n\001b\030\006"
    " \001(\014\022\t\n\001d\030\007 \001(\001\"1\n\tLogDetail\022$\n\005entry\030\001 "
    "\003(\0132\025.kit.log.LexicalEntry\"V\n\010LogEvent\022\016"
    "\n\006index1\030\004 \001(\t\022\016\n\006index2\030\005 \001(\t\022\016\n\006index3"
    "\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\022\014\n\004data\030\003 \002(\014\"K\n\005Lo"
    "gin\022\016\n\006index1\030\001 \001(\t\022\016\n\006index2\030\002 \001(\t\022\020\n\010u"
    "sername\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"]\n\tLogOp"
    "tion\022\016\n\006index3\030\001 \002(\t\022\021\n\tlog_level\030\002 \002(\r\022"
    "\026\n\016count_interval\030\003 \002(\r\022\025\n\renable_detail"
    "\030\004 \002(\r\"v\n\nLogOptions\022\021\n\tlog_level\030\002 \001(\r\022"
    "\026\n\016count_interval\030\003 \001(\r\022\025\n\renable_detail"
    "\030\004 \001(\r\022&\n\nlog_option\030\001 \003(\0132\022.kit.log.Log"
    "Option\"\340\001\n\005Query\022\016\n\006index1\030\001 \002(\t\022\016\n\006inde"
    "x2\030\002 \001(\t\022\016\n\006index3\030\003 \001(\t\022\022\n\nbegin_time\030\007"
    " \001(\004\022\020\n\010end_time\030\010 \001(\004\022\017\n\007no_sort\030\004 \001(\005\022"
    "\030\n\020condition_clause\030\005 \001(\t\022\020\n\010is_count\030\006 "
    "\001(\005\022\017\n\007limit_a\030\t \001(\005\022\017\n\007limit_b\030\n \001(\005\022\020\n"
    "\010username\030\013 \001(\t\022\020\n\010password\030\014 \001(\t\"3\n\013Que"
    "ryResult\022$\n\tlog_event\030\001 \003(\0132\021.kit.log.Lo"
    "gEvent", 846);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log/log.proto", &protobuf_RegisterTypes);
  LexicalEntry::default_instance_ = new LexicalEntry();
  LogDetail::default_instance_ = new LogDetail();
  LogEvent::default_instance_ = new LogEvent();
  Login::default_instance_ = new Login();
  LogOption::default_instance_ = new LogOption();
  LogOptions::default_instance_ = new LogOptions();
  Query::default_instance_ = new Query();
  QueryResult::default_instance_ = new QueryResult();
  LexicalEntry::default_instance_->InitAsDefaultInstance();
  LogDetail::default_instance_->InitAsDefaultInstance();
  LogEvent::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LogOption::default_instance_->InitAsDefaultInstance();
  LogOptions::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  QueryResult::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2flog_2eproto {
  StaticDescriptorInitializer_log_2flog_2eproto() {
    protobuf_AddDesc_log_2flog_2eproto();
  }
} static_descriptor_initializer_log_2flog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LexicalEntry::kEntryNameFieldNumber;
const int LexicalEntry::kValueTypeFieldNumber;
const int LexicalEntry::kUFieldNumber;
const int LexicalEntry::kIFieldNumber;
const int LexicalEntry::kSFieldNumber;
const int LexicalEntry::kBFieldNumber;
const int LexicalEntry::kDFieldNumber;
#endif  // !_MSC_VER

LexicalEntry::LexicalEntry()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.LexicalEntry)
}

void LexicalEntry::InitAsDefaultInstance() {
}

LexicalEntry::LexicalEntry(const LexicalEntry& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.LexicalEntry)
}

void LexicalEntry::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entry_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
  u_ = GOOGLE_ULONGLONG(0);
  i_ = GOOGLE_LONGLONG(0);
  s_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  b_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LexicalEntry::~LexicalEntry() {
  // @@protoc_insertion_point(destructor:kit.log.LexicalEntry)
  SharedDtor();
}

void LexicalEntry::SharedDtor() {
  if (entry_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entry_name_;
  }
  if (s_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (b_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete b_;
  }
  if (this != default_instance_) {
  }
}

void LexicalEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LexicalEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LexicalEntry_descriptor_;
}

const LexicalEntry& LexicalEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

LexicalEntry* LexicalEntry::default_instance_ = NULL;

LexicalEntry* LexicalEntry::New() const {
  return new LexicalEntry;
}

void LexicalEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LexicalEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(u_, i_);
    ZR_(d_, value_type_);
    if (has_entry_name()) {
      if (entry_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entry_name_->clear();
      }
    }
    if (has_s()) {
      if (s_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        s_->clear();
      }
    }
    if (has_b()) {
      if (b_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        b_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LexicalEntry::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.LexicalEntry)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_type_)));
          set_has_value_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entry_name;
        break;
      }

      // optional string entry_name = 2;
      case 2: {
        if (tag == 18) {
         parse_entry_name:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_name()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entry_name().data(), this->entry_name().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "entry_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_u;
        break;
      }

      // optional uint64 u = 3;
      case 3: {
        if (tag == 24) {
         parse_u:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_i;
        break;
      }

      // optional sint64 i = 4;
      case 4: {
        if (tag == 32) {
         parse_i:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_s;
        break;
      }

      // optional string s = 5;
      case 5: {
        if (tag == 42) {
         parse_s:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s().data(), this->s().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "s");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_b;
        break;
      }

      // optional bytes b = 6;
      case 6: {
        if (tag == 50) {
         parse_b:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_d;
        break;
      }

      // optional double d = 7;
      case 7: {
        if (tag == 57) {
         parse_d:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.LexicalEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.LexicalEntry)
  return false;
#undef DO_
}

void LexicalEntry::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.LexicalEntry)
  // required int32 value_type = 1;
  if (has_value_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(1, this->value_type(), output);
  }

  // optional string entry_name = 2;
  if (has_entry_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entry_name().data(), this->entry_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "entry_name");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entry_name(), output);
  }

  // optional uint64 u = 3;
  if (has_u()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(3, this->u(), output);
  }

  // optional sint64 i = 4;
  if (has_i()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteSInt64(4, this->i(), output);
  }

  // optional string s = 5;
  if (has_s()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->s(), output);
  }

  // optional bytes b = 6;
  if (has_b()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->b(), output);
  }

  // optional double d = 7;
  if (has_d()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteDouble(7, this->d(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.LexicalEntry)
}

::google_lalune::protobuf::uint8* LexicalEntry::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.LexicalEntry)
  // required int32 value_type = 1;
  if (has_value_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value_type(), target);
  }

  // optional string entry_name = 2;
  if (has_entry_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entry_name().data(), this->entry_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "entry_name");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entry_name(), target);
  }

  // optional uint64 u = 3;
  if (has_u()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->u(), target);
  }

  // optional sint64 i = 4;
  if (has_i()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->i(), target);
  }

  // optional string s = 5;
  if (has_s()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s().data(), this->s().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "s");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->s(), target);
  }

  // optional bytes b = 6;
  if (has_b()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->b(), target);
  }

  // optional double d = 7;
  if (has_d()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->d(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.LexicalEntry)
  return target;
}

int LexicalEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string entry_name = 2;
    if (has_entry_name()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->entry_name());
    }

    // required int32 value_type = 1;
    if (has_value_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->value_type());
    }

    // optional uint64 u = 3;
    if (has_u()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->u());
    }

    // optional sint64 i = 4;
    if (has_i()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::SInt64Size(
          this->i());
    }

    // optional string s = 5;
    if (has_s()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

    // optional bytes b = 6;
    if (has_b()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->b());
    }

    // optional double d = 7;
    if (has_d()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LexicalEntry::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LexicalEntry* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LexicalEntry*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LexicalEntry::MergeFrom(const LexicalEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_name()) {
      set_entry_name(from.entry_name());
    }
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LexicalEntry::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LexicalEntry::CopyFrom(const LexicalEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LexicalEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LexicalEntry::Swap(LexicalEntry* other) {
  if (other != this) {
    std::swap(entry_name_, other->entry_name_);
    std::swap(value_type_, other->value_type_);
    std::swap(u_, other->u_);
    std::swap(i_, other->i_);
    std::swap(s_, other->s_);
    std::swap(b_, other->b_);
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LexicalEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LexicalEntry_descriptor_;
  metadata.reflection = LexicalEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogDetail::kEntryFieldNumber;
#endif  // !_MSC_VER

LogDetail::LogDetail()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.LogDetail)
}

void LogDetail::InitAsDefaultInstance() {
}

LogDetail::LogDetail(const LogDetail& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.LogDetail)
}

void LogDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogDetail::~LogDetail() {
  // @@protoc_insertion_point(destructor:kit.log.LogDetail)
  SharedDtor();
}

void LogDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LogDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogDetail_descriptor_;
}

const LogDetail& LogDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

LogDetail* LogDetail::default_instance_ = NULL;

LogDetail* LogDetail::New() const {
  return new LogDetail;
}

void LogDetail::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogDetail::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.LogDetail)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kit.log.LexicalEntry entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.LogDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.LogDetail)
  return false;
#undef DO_
}

void LogDetail::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.LogDetail)
  // repeated .kit.log.LexicalEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.LogDetail)
}

::google_lalune::protobuf::uint8* LogDetail::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.LogDetail)
  // repeated .kit.log.LexicalEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.LogDetail)
  return target;
}

int LogDetail::ByteSize() const {
  int total_size = 0;

  // repeated .kit.log.LexicalEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogDetail::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogDetail* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LogDetail*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogDetail::MergeFrom(const LogDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogDetail::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogDetail::CopyFrom(const LogDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogDetail::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void LogDetail::Swap(LogDetail* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LogDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LogDetail_descriptor_;
  metadata.reflection = LogDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEvent::kIndex1FieldNumber;
const int LogEvent::kIndex2FieldNumber;
const int LogEvent::kIndex3FieldNumber;
const int LogEvent::kTimeFieldNumber;
const int LogEvent::kDataFieldNumber;
#endif  // !_MSC_VER

LogEvent::LogEvent()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.LogEvent)
}

void LogEvent::InitAsDefaultInstance() {
}

LogEvent::LogEvent(const LogEvent& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.LogEvent)
}

void LogEvent::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index1_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  index2_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  index3_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEvent::~LogEvent() {
  // @@protoc_insertion_point(destructor:kit.log.LogEvent)
  SharedDtor();
}

void LogEvent::SharedDtor() {
  if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index1_;
  }
  if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index2_;
  }
  if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index3_;
  }
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LogEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEvent_descriptor_;
}

const LogEvent& LogEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

LogEvent* LogEvent::default_instance_ = NULL;

LogEvent* LogEvent::New() const {
  return new LogEvent;
}

void LogEvent::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_index1()) {
      if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index1_->clear();
      }
    }
    if (has_index2()) {
      if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index2_->clear();
      }
    }
    if (has_index3()) {
      if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index3_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEvent::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.LogEvent)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string index3 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index3()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index3().data(), this->index3().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_index1;
        break;
      }

      // optional string index1 = 4;
      case 4: {
        if (tag == 34) {
         parse_index1:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index1()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index1().data(), this->index1().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_index2;
        break;
      }

      // optional string index2 = 5;
      case 5: {
        if (tag == 42) {
         parse_index2:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index2()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index2().data(), this->index2().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.LogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.LogEvent)
  return false;
#undef DO_
}

void LogEvent::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.LogEvent)
  // required string index3 = 1;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index3(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional string index1 = 4;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->index1(), output);
  }

  // optional string index2 = 5;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->index2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.LogEvent)
}

::google_lalune::protobuf::uint8* LogEvent::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.LogEvent)
  // required string index3 = 1;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index3(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string index1 = 4;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->index1(), target);
  }

  // optional string index2 = 5;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->index2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.LogEvent)
  return target;
}

int LogEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string index1 = 4;
    if (has_index1()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index1());
    }

    // optional string index2 = 5;
    if (has_index2()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index2());
    }

    // required string index3 = 1;
    if (has_index3()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index3());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEvent::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEvent* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LogEvent*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEvent::MergeFrom(const LogEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_index3()) {
      set_index3(from.index3());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEvent::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEvent::CopyFrom(const LogEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void LogEvent::Swap(LogEvent* other) {
  if (other != this) {
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(index3_, other->index3_);
    std::swap(time_, other->time_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LogEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LogEvent_descriptor_;
  metadata.reflection = LogEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kIndex1FieldNumber;
const int Login::kIndex2FieldNumber;
const int Login::kUsernameFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.Login)
}

void Login::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index1_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  index2_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:kit.log.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index1_;
  }
  if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index2_;
  }
  if (username_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_index1()) {
      if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index1_->clear();
      }
    }
    if (has_index2()) {
      if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index2_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.Login)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string index1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index1()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index1().data(), this->index1().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index2;
        break;
      }

      // optional string index2 = 2;
      case 2: {
        if (tag == 18) {
         parse_index2:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index2()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index2().data(), this->index2().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.Login)
  // optional string index1 = 1;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index1(), output);
  }

  // optional string index2 = 2;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->index2(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.Login)
}

::google_lalune::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.Login)
  // optional string index1 = 1;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index1(), target);
  }

  // optional string index2 = 2;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index2(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string index1 = 1;
    if (has_index1()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index1());
    }

    // optional string index2 = 2;
    if (has_index2()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index2());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogOption::kIndex3FieldNumber;
const int LogOption::kLogLevelFieldNumber;
const int LogOption::kCountIntervalFieldNumber;
const int LogOption::kEnableDetailFieldNumber;
#endif  // !_MSC_VER

LogOption::LogOption()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.LogOption)
}

void LogOption::InitAsDefaultInstance() {
}

LogOption::LogOption(const LogOption& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.LogOption)
}

void LogOption::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index3_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  log_level_ = 0u;
  count_interval_ = 0u;
  enable_detail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOption::~LogOption() {
  // @@protoc_insertion_point(destructor:kit.log.LogOption)
  SharedDtor();
}

void LogOption::SharedDtor() {
  if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index3_;
  }
  if (this != default_instance_) {
  }
}

void LogOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LogOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOption_descriptor_;
}

const LogOption& LogOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

LogOption* LogOption::default_instance_ = NULL;

LogOption* LogOption::New() const {
  return new LogOption;
}

void LogOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(log_level_, enable_detail_);
    if (has_index3()) {
      if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index3_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOption::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.LogOption)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string index3 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index3()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index3().data(), this->index3().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_log_level;
        break;
      }

      // required uint32 log_level = 2;
      case 2: {
        if (tag == 16) {
         parse_log_level:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count_interval;
        break;
      }

      // required uint32 count_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_count_interval:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_interval_)));
          set_has_count_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enable_detail;
        break;
      }

      // required uint32 enable_detail = 4;
      case 4: {
        if (tag == 32) {
         parse_enable_detail:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_detail_)));
          set_has_enable_detail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.LogOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.LogOption)
  return false;
#undef DO_
}

void LogOption::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.LogOption)
  // required string index3 = 1;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index3(), output);
  }

  // required uint32 log_level = 2;
  if (has_log_level()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->log_level(), output);
  }

  // required uint32 count_interval = 3;
  if (has_count_interval()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count_interval(), output);
  }

  // required uint32 enable_detail = 4;
  if (has_enable_detail()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enable_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.LogOption)
}

::google_lalune::protobuf::uint8* LogOption::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.LogOption)
  // required string index3 = 1;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index3(), target);
  }

  // required uint32 log_level = 2;
  if (has_log_level()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->log_level(), target);
  }

  // required uint32 count_interval = 3;
  if (has_count_interval()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count_interval(), target);
  }

  // required uint32 enable_detail = 4;
  if (has_enable_detail()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enable_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.LogOption)
  return target;
}

int LogOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string index3 = 1;
    if (has_index3()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index3());
    }

    // required uint32 log_level = 2;
    if (has_log_level()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level());
    }

    // required uint32 count_interval = 3;
    if (has_count_interval()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_interval());
    }

    // required uint32 enable_detail = 4;
    if (has_enable_detail()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOption::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOption* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LogOption*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOption::MergeFrom(const LogOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index3()) {
      set_index3(from.index3());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_count_interval()) {
      set_count_interval(from.count_interval());
    }
    if (from.has_enable_detail()) {
      set_enable_detail(from.enable_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOption::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOption::CopyFrom(const LogOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogOption::Swap(LogOption* other) {
  if (other != this) {
    std::swap(index3_, other->index3_);
    std::swap(log_level_, other->log_level_);
    std::swap(count_interval_, other->count_interval_);
    std::swap(enable_detail_, other->enable_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LogOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LogOption_descriptor_;
  metadata.reflection = LogOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogOptions::kLogLevelFieldNumber;
const int LogOptions::kCountIntervalFieldNumber;
const int LogOptions::kEnableDetailFieldNumber;
const int LogOptions::kLogOptionFieldNumber;
#endif  // !_MSC_VER

LogOptions::LogOptions()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.LogOptions)
}

void LogOptions::InitAsDefaultInstance() {
}

LogOptions::LogOptions(const LogOptions& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.LogOptions)
}

void LogOptions::SharedCtor() {
  _cached_size_ = 0;
  log_level_ = 0u;
  count_interval_ = 0u;
  enable_detail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOptions::~LogOptions() {
  // @@protoc_insertion_point(destructor:kit.log.LogOptions)
  SharedDtor();
}

void LogOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LogOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOptions_descriptor_;
}

const LogOptions& LogOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

LogOptions* LogOptions::default_instance_ = NULL;

LogOptions* LogOptions::New() const {
  return new LogOptions;
}

void LogOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(log_level_, count_interval_);
    enable_detail_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  log_option_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOptions::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.LogOptions)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kit.log.LogOption log_option = 1;
      case 1: {
        if (tag == 10) {
         parse_log_option:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_log_option;
        if (input->ExpectTag(16)) goto parse_log_level;
        break;
      }

      // optional uint32 log_level = 2;
      case 2: {
        if (tag == 16) {
         parse_log_level:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count_interval;
        break;
      }

      // optional uint32 count_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_count_interval:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_interval_)));
          set_has_count_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enable_detail;
        break;
      }

      // optional uint32 enable_detail = 4;
      case 4: {
        if (tag == 32) {
         parse_enable_detail:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_detail_)));
          set_has_enable_detail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.LogOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.LogOptions)
  return false;
#undef DO_
}

void LogOptions::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.LogOptions)
  // repeated .kit.log.LogOption log_option = 1;
  for (int i = 0; i < this->log_option_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_option(i), output);
  }

  // optional uint32 log_level = 2;
  if (has_log_level()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->log_level(), output);
  }

  // optional uint32 count_interval = 3;
  if (has_count_interval()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count_interval(), output);
  }

  // optional uint32 enable_detail = 4;
  if (has_enable_detail()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enable_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.LogOptions)
}

::google_lalune::protobuf::uint8* LogOptions::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.LogOptions)
  // repeated .kit.log.LogOption log_option = 1;
  for (int i = 0; i < this->log_option_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_option(i), target);
  }

  // optional uint32 log_level = 2;
  if (has_log_level()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->log_level(), target);
  }

  // optional uint32 count_interval = 3;
  if (has_count_interval()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count_interval(), target);
  }

  // optional uint32 enable_detail = 4;
  if (has_enable_detail()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enable_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.LogOptions)
  return target;
}

int LogOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 log_level = 2;
    if (has_log_level()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level());
    }

    // optional uint32 count_interval = 3;
    if (has_count_interval()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_interval());
    }

    // optional uint32 enable_detail = 4;
    if (has_enable_detail()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable_detail());
    }

  }
  // repeated .kit.log.LogOption log_option = 1;
  total_size += 1 * this->log_option_size();
  for (int i = 0; i < this->log_option_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_option(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOptions::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOptions* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LogOptions*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOptions::MergeFrom(const LogOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_option_.MergeFrom(from.log_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_count_interval()) {
      set_count_interval(from.count_interval());
    }
    if (from.has_enable_detail()) {
      set_enable_detail(from.enable_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOptions::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOptions::CopyFrom(const LogOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOptions::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->log_option())) return false;
  return true;
}

void LogOptions::Swap(LogOptions* other) {
  if (other != this) {
    std::swap(log_level_, other->log_level_);
    std::swap(count_interval_, other->count_interval_);
    std::swap(enable_detail_, other->enable_detail_);
    log_option_.Swap(&other->log_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LogOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LogOptions_descriptor_;
  metadata.reflection = LogOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Query::kIndex1FieldNumber;
const int Query::kIndex2FieldNumber;
const int Query::kIndex3FieldNumber;
const int Query::kBeginTimeFieldNumber;
const int Query::kEndTimeFieldNumber;
const int Query::kNoSortFieldNumber;
const int Query::kConditionClauseFieldNumber;
const int Query::kIsCountFieldNumber;
const int Query::kLimitAFieldNumber;
const int Query::kLimitBFieldNumber;
const int Query::kUsernameFieldNumber;
const int Query::kPasswordFieldNumber;
#endif  // !_MSC_VER

Query::Query()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.Query)
}

void Query::InitAsDefaultInstance() {
}

Query::Query(const Query& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.Query)
}

void Query::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index1_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  index2_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  index3_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  no_sort_ = 0;
  condition_clause_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  is_count_ = 0;
  limit_a_ = 0;
  limit_b_ = 0;
  username_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:kit.log.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index1_;
  }
  if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index2_;
  }
  if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index3_;
  }
  if (condition_clause_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete condition_clause_;
  }
  if (username_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New() const {
  return new Query;
}

void Query::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Query*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(begin_time_, end_time_);
    ZR_(no_sort_, is_count_);
    if (has_index1()) {
      if (index1_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index1_->clear();
      }
    }
    if (has_index2()) {
      if (index2_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index2_->clear();
      }
    }
    if (has_index3()) {
      if (index3_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index3_->clear();
      }
    }
    if (has_condition_clause()) {
      if (condition_clause_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        condition_clause_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(limit_a_, limit_b_);
    if (has_username()) {
      if (username_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.Query)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string index1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index1()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index1().data(), this->index1().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index2;
        break;
      }

      // optional string index2 = 2;
      case 2: {
        if (tag == 18) {
         parse_index2:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index2()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index2().data(), this->index2().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index3;
        break;
      }

      // optional string index3 = 3;
      case 3: {
        if (tag == 26) {
         parse_index3:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index3()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index3().data(), this->index3().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "index3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_no_sort;
        break;
      }

      // optional int32 no_sort = 4;
      case 4: {
        if (tag == 32) {
         parse_no_sort:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_sort_)));
          set_has_no_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_condition_clause;
        break;
      }

      // optional string condition_clause = 5;
      case 5: {
        if (tag == 42) {
         parse_condition_clause:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition_clause()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->condition_clause().data(), this->condition_clause().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "condition_clause");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_count;
        break;
      }

      // optional int32 is_count = 6;
      case 6: {
        if (tag == 48) {
         parse_is_count:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_count_)));
          set_has_is_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 7;
      case 7: {
        if (tag == 56) {
         parse_begin_time:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 8;
      case 8: {
        if (tag == 64) {
         parse_end_time:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_limit_a;
        break;
      }

      // optional int32 limit_a = 9;
      case 9: {
        if (tag == 72) {
         parse_limit_a:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_a_)));
          set_has_limit_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_limit_b;
        break;
      }

      // optional int32 limit_b = 10;
      case 10: {
        if (tag == 80) {
         parse_limit_b:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_b_)));
          set_has_limit_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_username;
        break;
      }

      // optional string username = 11;
      case 11: {
        if (tag == 90) {
         parse_username:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_password;
        break;
      }

      // optional string password = 12;
      case 12: {
        if (tag == 98) {
         parse_password:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.Query)
  // required string index1 = 1;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index1(), output);
  }

  // optional string index2 = 2;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->index2(), output);
  }

  // optional string index3 = 3;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->index3(), output);
  }

  // optional int32 no_sort = 4;
  if (has_no_sort()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(4, this->no_sort(), output);
  }

  // optional string condition_clause = 5;
  if (has_condition_clause()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition_clause().data(), this->condition_clause().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "condition_clause");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->condition_clause(), output);
  }

  // optional int32 is_count = 6;
  if (has_is_count()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_count(), output);
  }

  // optional uint64 begin_time = 7;
  if (has_begin_time()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(7, this->begin_time(), output);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_time(), output);
  }

  // optional int32 limit_a = 9;
  if (has_limit_a()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(9, this->limit_a(), output);
  }

  // optional int32 limit_b = 10;
  if (has_limit_b()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(10, this->limit_b(), output);
  }

  // optional string username = 11;
  if (has_username()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->username(), output);
  }

  // optional string password = 12;
  if (has_password()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.Query)
}

::google_lalune::protobuf::uint8* Query::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.Query)
  // required string index1 = 1;
  if (has_index1()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index1().data(), this->index1().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index1");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index1(), target);
  }

  // optional string index2 = 2;
  if (has_index2()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index2().data(), this->index2().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index2");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index2(), target);
  }

  // optional string index3 = 3;
  if (has_index3()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index3().data(), this->index3().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "index3");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->index3(), target);
  }

  // optional int32 no_sort = 4;
  if (has_no_sort()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->no_sort(), target);
  }

  // optional string condition_clause = 5;
  if (has_condition_clause()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition_clause().data(), this->condition_clause().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "condition_clause");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->condition_clause(), target);
  }

  // optional int32 is_count = 6;
  if (has_is_count()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_count(), target);
  }

  // optional uint64 begin_time = 7;
  if (has_begin_time()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->begin_time(), target);
  }

  // optional uint64 end_time = 8;
  if (has_end_time()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_time(), target);
  }

  // optional int32 limit_a = 9;
  if (has_limit_a()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->limit_a(), target);
  }

  // optional int32 limit_b = 10;
  if (has_limit_b()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->limit_b(), target);
  }

  // optional string username = 11;
  if (has_username()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->username(), target);
  }

  // optional string password = 12;
  if (has_password()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.Query)
  return target;
}

int Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string index1 = 1;
    if (has_index1()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index1());
    }

    // optional string index2 = 2;
    if (has_index2()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index2());
    }

    // optional string index3 = 3;
    if (has_index3()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->index3());
    }

    // optional uint64 begin_time = 7;
    if (has_begin_time()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional int32 no_sort = 4;
    if (has_no_sort()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->no_sort());
    }

    // optional string condition_clause = 5;
    if (has_condition_clause()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->condition_clause());
    }

    // optional int32 is_count = 6;
    if (has_is_count()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->is_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 limit_a = 9;
    if (has_limit_a()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_a());
    }

    // optional int32 limit_b = 10;
    if (has_limit_b()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_b());
    }

    // optional string username = 11;
    if (has_username()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 12;
    if (has_password()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const Query*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_index3()) {
      set_index3(from.index3());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_no_sort()) {
      set_no_sort(from.no_sort());
    }
    if (from.has_condition_clause()) {
      set_condition_clause(from.condition_clause());
    }
    if (from.has_is_count()) {
      set_is_count(from.is_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limit_a()) {
      set_limit_a(from.limit_a());
    }
    if (from.has_limit_b()) {
      set_limit_b(from.limit_b());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Query::Swap(Query* other) {
  if (other != this) {
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(index3_, other->index3_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(no_sort_, other->no_sort_);
    std::swap(condition_clause_, other->condition_clause_);
    std::swap(is_count_, other->is_count_);
    std::swap(limit_a_, other->limit_a_);
    std::swap(limit_b_, other->limit_b_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResult::kLogEventFieldNumber;
#endif  // !_MSC_VER

QueryResult::QueryResult()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kit.log.QueryResult)
}

void QueryResult::InitAsDefaultInstance() {
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kit.log.QueryResult)
}

void QueryResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:kit.log.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2flog_2eproto();
  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New() const {
  return new QueryResult;
}

void QueryResult::Clear() {
  log_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kit.log.QueryResult)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kit.log.LogEvent log_event = 1;
      case 1: {
        if (tag == 10) {
         parse_log_event:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_log_event;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kit.log.QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kit.log.QueryResult)
  return false;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kit.log.QueryResult)
  // repeated .kit.log.LogEvent log_event = 1;
  for (int i = 0; i < this->log_event_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_event(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kit.log.QueryResult)
}

::google_lalune::protobuf::uint8* QueryResult::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kit.log.QueryResult)
  // repeated .kit.log.LogEvent log_event = 1;
  for (int i = 0; i < this->log_event_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_event(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kit.log.QueryResult)
  return target;
}

int QueryResult::ByteSize() const {
  int total_size = 0;

  // repeated .kit.log.LogEvent log_event = 1;
  total_size += 1 * this->log_event_size();
  for (int i = 0; i < this->log_event_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const QueryResult*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_event_.MergeFrom(from.log_event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->log_event())) return false;
  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other != this) {
    log_event_.Swap(&other->log_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace kit

// @@protoc_insertion_point(global_scope)
