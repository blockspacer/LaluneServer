// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonlib/CommonLib.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commonlib/CommonLib.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {

namespace {

const ::google_lalune::protobuf::Descriptor* HeaderEx_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  HeaderEx_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* HelloResult_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  HelloResult_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ReportLoad_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ReportLoad_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AddressInfo_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AddressInfo_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AddressList_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AddressList_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ServerId_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ServerId_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* Cmd2Server_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  Cmd2Server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commonlib_2fCommonLib_2eproto() {
  protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commonlib/CommonLib.proto");
  GOOGLE_CHECK(file != NULL);
  HeaderEx_descriptor_ = file->message_type(0);
  static const int HeaderEx_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, gateway_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, operation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, flag_),
  };
  HeaderEx_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      HeaderEx_descriptor_,
      HeaderEx::default_instance_,
      HeaderEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderEx));
  Hello_descriptor_ = file->message_type(1);
  static const int Hello_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, my_listening_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, is_server_start_),
  };
  Hello_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  HelloResult_descriptor_ = file->message_type(2);
  static const int HelloResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResult, server_id_),
  };
  HelloResult_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      HelloResult_descriptor_,
      HelloResult::default_instance_,
      HelloResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResult, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloResult));
  ReportLoad_descriptor_ = file->message_type(3);
  static const int ReportLoad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, load_),
  };
  ReportLoad_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ReportLoad_descriptor_,
      ReportLoad::default_instance_,
      ReportLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportLoad));
  AddressInfo_descriptor_ = file->message_type(4);
  static const int AddressInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, server_type_),
  };
  AddressInfo_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AddressInfo_descriptor_,
      AddressInfo::default_instance_,
      AddressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressInfo));
  AddressList_descriptor_ = file->message_type(5);
  static const int AddressList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, addr_),
  };
  AddressList_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AddressList_descriptor_,
      AddressList::default_instance_,
      AddressList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressList));
  ServerId_descriptor_ = file->message_type(6);
  static const int ServerId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerId, server_id_),
  };
  ServerId_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ServerId_descriptor_,
      ServerId::default_instance_,
      ServerId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerId, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerId));
  Cmd2Server_descriptor_ = file->message_type(7);
  static const int Cmd2Server_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd2Server, to_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd2Server, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd2Server, data_),
  };
  Cmd2Server_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      Cmd2Server_descriptor_,
      Cmd2Server::default_instance_,
      Cmd2Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd2Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd2Server, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd2Server));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commonlib_2fCommonLib_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderEx_descriptor_, &HeaderEx::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloResult_descriptor_, &HelloResult::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportLoad_descriptor_, &ReportLoad::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressInfo_descriptor_, &AddressInfo::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressList_descriptor_, &AddressList::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerId_descriptor_, &ServerId::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd2Server_descriptor_, &Cmd2Server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commonlib_2fCommonLib_2eproto() {
  delete HeaderEx::default_instance_;
  delete HeaderEx_reflection_;
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete HelloResult::default_instance_;
  delete HelloResult_reflection_;
  delete ReportLoad::default_instance_;
  delete ReportLoad_reflection_;
  delete AddressInfo::default_instance_;
  delete AddressInfo_reflection_;
  delete AddressList::default_instance_;
  delete AddressList_reflection_;
  delete ServerId::default_instance_;
  delete ServerId_reflection_;
  delete Cmd2Server::default_instance_;
  delete Cmd2Server_reflection_;
}

void protobuf_AddDesc_commonlib_2fCommonLib_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031commonlib/CommonLib.proto\022\006common\"O\n\010H"
    "eaderEx\022\013\n\003uid\030\001 \001(\r\022\022\n\ngateway_id\030\002 \001(\r"
    "\022\024\n\014operation_id\030\003 \001(\r\022\014\n\004flag\030\004 \001(\r\"P\n\005"
    "Hello\022\031\n\021my_listening_port\030\001 \002(\r\022\023\n\013serv"
    "er_type\030\002 \002(\r\022\027\n\017is_server_start\030\003 \002(\r\" "
    "\n\013HelloResult\022\021\n\tserver_id\030\001 \002(\r\"\032\n\nRepo"
    "rtLoad\022\014\n\004load\030\001 \002(\002\"O\n\013AddressInfo\022\n\n\002i"
    "p\030\001 \002(\007\022\014\n\004port\030\002 \002(\r\022\021\n\tserver_id\030\003 \002(\r"
    "\022\023\n\013server_type\030\004 \002(\r\"0\n\013AddressList\022!\n\004"
    "addr\030\001 \003(\0132\023.common.AddressInfo\"\035\n\010Serve"
    "rId\022\021\n\tserver_id\030\001 \002(\r\"D\n\nCmd2Server\022\026\n\016"
    "to_server_type\030\001 \002(\r\022\020\n\010cmd_type\030\002 \002(\r\022\014"
    "\n\004data\030\003 \002(\014", 492);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonlib/CommonLib.proto", &protobuf_RegisterTypes);
  HeaderEx::default_instance_ = new HeaderEx();
  Hello::default_instance_ = new Hello();
  HelloResult::default_instance_ = new HelloResult();
  ReportLoad::default_instance_ = new ReportLoad();
  AddressInfo::default_instance_ = new AddressInfo();
  AddressList::default_instance_ = new AddressList();
  ServerId::default_instance_ = new ServerId();
  Cmd2Server::default_instance_ = new Cmd2Server();
  HeaderEx::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  HelloResult::default_instance_->InitAsDefaultInstance();
  ReportLoad::default_instance_->InitAsDefaultInstance();
  AddressInfo::default_instance_->InitAsDefaultInstance();
  AddressList::default_instance_->InitAsDefaultInstance();
  ServerId::default_instance_->InitAsDefaultInstance();
  Cmd2Server::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commonlib_2fCommonLib_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commonlib_2fCommonLib_2eproto {
  StaticDescriptorInitializer_commonlib_2fCommonLib_2eproto() {
    protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  }
} static_descriptor_initializer_commonlib_2fCommonLib_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeaderEx::kUidFieldNumber;
const int HeaderEx::kGatewayIdFieldNumber;
const int HeaderEx::kOperationIdFieldNumber;
const int HeaderEx::kFlagFieldNumber;
#endif  // !_MSC_VER

HeaderEx::HeaderEx()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.HeaderEx)
}

void HeaderEx::InitAsDefaultInstance() {
}

HeaderEx::HeaderEx(const HeaderEx& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.HeaderEx)
}

void HeaderEx::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  gateway_id_ = 0u;
  operation_id_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderEx::~HeaderEx() {
  // @@protoc_insertion_point(destructor:common.HeaderEx)
  SharedDtor();
}

void HeaderEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeaderEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* HeaderEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderEx_descriptor_;
}

const HeaderEx& HeaderEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

HeaderEx* HeaderEx::default_instance_ = NULL;

HeaderEx* HeaderEx::New() const {
  return new HeaderEx;
}

void HeaderEx::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeaderEx*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderEx::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.HeaderEx)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gateway_id;
        break;
      }

      // optional uint32 gateway_id = 2;
      case 2: {
        if (tag == 16) {
         parse_gateway_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateway_id_)));
          set_has_gateway_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operation_id;
        break;
      }

      // optional uint32 operation_id = 3;
      case 3: {
        if (tag == 24) {
         parse_operation_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_id_)));
          set_has_operation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.HeaderEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.HeaderEx)
  return false;
#undef DO_
}

void HeaderEx::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.HeaderEx)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 gateway_id = 2;
  if (has_gateway_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateway_id(), output);
  }

  // optional uint32 operation_id = 3;
  if (has_operation_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operation_id(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.HeaderEx)
}

::google_lalune::protobuf::uint8* HeaderEx::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.HeaderEx)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 gateway_id = 2;
  if (has_gateway_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateway_id(), target);
  }

  // optional uint32 operation_id = 3;
  if (has_operation_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operation_id(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.HeaderEx)
  return target;
}

int HeaderEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 gateway_id = 2;
    if (has_gateway_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateway_id());
    }

    // optional uint32 operation_id = 3;
    if (has_operation_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation_id());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderEx::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderEx* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const HeaderEx*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderEx::MergeFrom(const HeaderEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateway_id()) {
      set_gateway_id(from.gateway_id());
    }
    if (from.has_operation_id()) {
      set_operation_id(from.operation_id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderEx::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderEx::CopyFrom(const HeaderEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderEx::IsInitialized() const {

  return true;
}

void HeaderEx::Swap(HeaderEx* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gateway_id_, other->gateway_id_);
    std::swap(operation_id_, other->operation_id_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata HeaderEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = HeaderEx_descriptor_;
  metadata.reflection = HeaderEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kMyListeningPortFieldNumber;
const int Hello::kServerTypeFieldNumber;
const int Hello::kIsServerStartFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Hello)
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.Hello)
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  my_listening_port_ = 0u;
  server_type_ = 0u;
  is_server_start_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:common.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Hello*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(my_listening_port_, is_server_start_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Hello)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 my_listening_port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_listening_port_)));
          set_has_my_listening_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // required uint32 server_type = 2;
      case 2: {
        if (tag == 16) {
         parse_server_type:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_server_start;
        break;
      }

      // required uint32 is_server_start = 3;
      case 3: {
        if (tag == 24) {
         parse_is_server_start:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_server_start_)));
          set_has_is_server_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Hello)
  // required uint32 my_listening_port = 1;
  if (has_my_listening_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->my_listening_port(), output);
  }

  // required uint32 server_type = 2;
  if (has_server_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type(), output);
  }

  // required uint32 is_server_start = 3;
  if (has_is_server_start()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_server_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.Hello)
}

::google_lalune::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Hello)
  // required uint32 my_listening_port = 1;
  if (has_my_listening_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->my_listening_port(), target);
  }

  // required uint32 server_type = 2;
  if (has_server_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_type(), target);
  }

  // required uint32 is_server_start = 3;
  if (has_is_server_start()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_server_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Hello)
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 my_listening_port = 1;
    if (has_my_listening_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_listening_port());
    }

    // required uint32 server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // required uint32 is_server_start = 3;
    if (has_is_server_start()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_server_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_listening_port()) {
      set_my_listening_port(from.my_listening_port());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_is_server_start()) {
      set_is_server_start(from.is_server_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(my_listening_port_, other->my_listening_port_);
    std::swap(server_type_, other->server_type_);
    std::swap(is_server_start_, other->is_server_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloResult::kServerIdFieldNumber;
#endif  // !_MSC_VER

HelloResult::HelloResult()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.HelloResult)
}

void HelloResult::InitAsDefaultInstance() {
}

HelloResult::HelloResult(const HelloResult& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.HelloResult)
}

void HelloResult::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloResult::~HelloResult() {
  // @@protoc_insertion_point(destructor:common.HelloResult)
  SharedDtor();
}

void HelloResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelloResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* HelloResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloResult_descriptor_;
}

const HelloResult& HelloResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

HelloResult* HelloResult::default_instance_ = NULL;

HelloResult* HelloResult::New() const {
  return new HelloResult;
}

void HelloResult::Clear() {
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloResult::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.HelloResult)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.HelloResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.HelloResult)
  return false;
#undef DO_
}

void HelloResult::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.HelloResult)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.HelloResult)
}

::google_lalune::protobuf::uint8* HelloResult::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.HelloResult)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.HelloResult)
  return target;
}

int HelloResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloResult::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloResult* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const HelloResult*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloResult::MergeFrom(const HelloResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloResult::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloResult::CopyFrom(const HelloResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelloResult::Swap(HelloResult* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata HelloResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = HelloResult_descriptor_;
  metadata.reflection = HelloResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportLoad::kLoadFieldNumber;
#endif  // !_MSC_VER

ReportLoad::ReportLoad()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ReportLoad)
}

void ReportLoad::InitAsDefaultInstance() {
}

ReportLoad::ReportLoad(const ReportLoad& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.ReportLoad)
}

void ReportLoad::SharedCtor() {
  _cached_size_ = 0;
  load_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportLoad::~ReportLoad() {
  // @@protoc_insertion_point(destructor:common.ReportLoad)
  SharedDtor();
}

void ReportLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ReportLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportLoad_descriptor_;
}

const ReportLoad& ReportLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

ReportLoad* ReportLoad::default_instance_ = NULL;

ReportLoad* ReportLoad::New() const {
  return new ReportLoad;
}

void ReportLoad::Clear() {
  load_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportLoad::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ReportLoad)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float load = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ReportLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ReportLoad)
  return false;
#undef DO_
}

void ReportLoad::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ReportLoad)
  // required float load = 1;
  if (has_load()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteFloat(1, this->load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ReportLoad)
}

::google_lalune::protobuf::uint8* ReportLoad::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ReportLoad)
  // required float load = 1;
  if (has_load()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ReportLoad)
  return target;
}

int ReportLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float load = 1;
    if (has_load()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLoad::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportLoad* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ReportLoad*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportLoad::MergeFrom(const ReportLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load()) {
      set_load(from.load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportLoad::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLoad::CopyFrom(const ReportLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportLoad::Swap(ReportLoad* other) {
  if (other != this) {
    std::swap(load_, other->load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ReportLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ReportLoad_descriptor_;
  metadata.reflection = ReportLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressInfo::kIpFieldNumber;
const int AddressInfo::kPortFieldNumber;
const int AddressInfo::kServerIdFieldNumber;
const int AddressInfo::kServerTypeFieldNumber;
#endif  // !_MSC_VER

AddressInfo::AddressInfo()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.AddressInfo)
}

void AddressInfo::InitAsDefaultInstance() {
}

AddressInfo::AddressInfo(const AddressInfo& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.AddressInfo)
}

void AddressInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  server_id_ = 0u;
  server_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressInfo::~AddressInfo() {
  // @@protoc_insertion_point(destructor:common.AddressInfo)
  SharedDtor();
}

void AddressInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AddressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressInfo_descriptor_;
}

const AddressInfo& AddressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

AddressInfo* AddressInfo::default_instance_ = NULL;

AddressInfo* AddressInfo::New() const {
  return new AddressInfo;
}

void AddressInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddressInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, server_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressInfo::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.AddressInfo)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ip = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }

      // required uint32 server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_server_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_server_type;
        break;
      }

      // required uint32 server_type = 4;
      case 4: {
        if (tag == 32) {
         parse_server_type:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.AddressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.AddressInfo)
  return false;
#undef DO_
}

void AddressInfo::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.AddressInfo)
  // required fixed32 ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint32 server_id = 3;
  if (has_server_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_id(), output);
  }

  // required uint32 server_type = 4;
  if (has_server_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.AddressInfo)
}

::google_lalune::protobuf::uint8* AddressInfo::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.AddressInfo)
  // required fixed32 ip = 1;
  if (has_ip()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint32 server_id = 3;
  if (has_server_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_id(), target);
  }

  // required uint32 server_type = 4;
  if (has_server_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.AddressInfo)
  return target;
}

int AddressInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // required uint32 server_type = 4;
    if (has_server_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressInfo::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressInfo* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AddressInfo*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressInfo::MergeFrom(const AddressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressInfo::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressInfo::CopyFrom(const AddressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AddressInfo::Swap(AddressInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AddressInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AddressInfo_descriptor_;
  metadata.reflection = AddressInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressList::kAddrFieldNumber;
#endif  // !_MSC_VER

AddressList::AddressList()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.AddressList)
}

void AddressList::InitAsDefaultInstance() {
}

AddressList::AddressList(const AddressList& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.AddressList)
}

void AddressList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressList::~AddressList() {
  // @@protoc_insertion_point(destructor:common.AddressList)
  SharedDtor();
}

void AddressList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AddressList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressList_descriptor_;
}

const AddressList& AddressList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

AddressList* AddressList::default_instance_ = NULL;

AddressList* AddressList::New() const {
  return new AddressList;
}

void AddressList::Clear() {
  addr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressList::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.AddressList)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.AddressInfo addr = 1;
      case 1: {
        if (tag == 10) {
         parse_addr:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_addr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.AddressList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.AddressList)
  return false;
#undef DO_
}

void AddressList::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.AddressList)
  // repeated .common.AddressInfo addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.AddressList)
}

::google_lalune::protobuf::uint8* AddressList::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.AddressList)
  // repeated .common.AddressInfo addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.AddressList)
  return target;
}

int AddressList::ByteSize() const {
  int total_size = 0;

  // repeated .common.AddressInfo addr = 1;
  total_size += 1 * this->addr_size();
  for (int i = 0; i < this->addr_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressList::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressList* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AddressList*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressList::MergeFrom(const AddressList& from) {
  GOOGLE_CHECK_NE(&from, this);
  addr_.MergeFrom(from.addr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressList::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressList::CopyFrom(const AddressList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressList::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->addr())) return false;
  return true;
}

void AddressList::Swap(AddressList* other) {
  if (other != this) {
    addr_.Swap(&other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AddressList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AddressList_descriptor_;
  metadata.reflection = AddressList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerId::kServerIdFieldNumber;
#endif  // !_MSC_VER

ServerId::ServerId()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ServerId)
}

void ServerId::InitAsDefaultInstance() {
}

ServerId::ServerId(const ServerId& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.ServerId)
}

void ServerId::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerId::~ServerId() {
  // @@protoc_insertion_point(destructor:common.ServerId)
  SharedDtor();
}

void ServerId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ServerId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerId_descriptor_;
}

const ServerId& ServerId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

ServerId* ServerId::default_instance_ = NULL;

ServerId* ServerId::New() const {
  return new ServerId;
}

void ServerId::Clear() {
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerId::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ServerId)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ServerId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ServerId)
  return false;
#undef DO_
}

void ServerId::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ServerId)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ServerId)
}

::google_lalune::protobuf::uint8* ServerId::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ServerId)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ServerId)
  return target;
}

int ServerId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerId::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerId* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ServerId*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerId::MergeFrom(const ServerId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerId::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerId::CopyFrom(const ServerId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerId::Swap(ServerId* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ServerId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ServerId_descriptor_;
  metadata.reflection = ServerId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd2Server::kToServerTypeFieldNumber;
const int Cmd2Server::kCmdTypeFieldNumber;
const int Cmd2Server::kDataFieldNumber;
#endif  // !_MSC_VER

Cmd2Server::Cmd2Server()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Cmd2Server)
}

void Cmd2Server::InitAsDefaultInstance() {
}

Cmd2Server::Cmd2Server(const Cmd2Server& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.Cmd2Server)
}

void Cmd2Server::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  to_server_type_ = 0u;
  cmd_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd2Server::~Cmd2Server() {
  // @@protoc_insertion_point(destructor:common.Cmd2Server)
  SharedDtor();
}

void Cmd2Server::SharedDtor() {
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Cmd2Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* Cmd2Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd2Server_descriptor_;
}

const Cmd2Server& Cmd2Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

Cmd2Server* Cmd2Server::default_instance_ = NULL;

Cmd2Server* Cmd2Server::New() const {
  return new Cmd2Server;
}

void Cmd2Server::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cmd2Server*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(to_server_type_, cmd_type_);
    if (has_data()) {
      if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd2Server::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Cmd2Server)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 to_server_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_server_type_)));
          set_has_to_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd_type;
        break;
      }

      // required uint32 cmd_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd_type:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_type_)));
          set_has_cmd_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Cmd2Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Cmd2Server)
  return false;
#undef DO_
}

void Cmd2Server::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Cmd2Server)
  // required uint32 to_server_type = 1;
  if (has_to_server_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->to_server_type(), output);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd_type(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.Cmd2Server)
}

::google_lalune::protobuf::uint8* Cmd2Server::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Cmd2Server)
  // required uint32 to_server_type = 1;
  if (has_to_server_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->to_server_type(), target);
  }

  // required uint32 cmd_type = 2;
  if (has_cmd_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd_type(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Cmd2Server)
  return target;
}

int Cmd2Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 to_server_type = 1;
    if (has_to_server_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_server_type());
    }

    // required uint32 cmd_type = 2;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_type());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd2Server::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd2Server* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const Cmd2Server*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd2Server::MergeFrom(const Cmd2Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_server_type()) {
      set_to_server_type(from.to_server_type());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd2Server::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd2Server::CopyFrom(const Cmd2Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd2Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Cmd2Server::Swap(Cmd2Server* other) {
  if (other != this) {
    std::swap(to_server_type_, other->to_server_type_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata Cmd2Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = Cmd2Server_descriptor_;
  metadata.reflection = Cmd2Server_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)
