// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonlib/CommonLib.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commonlib/CommonLib.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {

namespace {

const ::google_lalune::protobuf::Descriptor* CorrespondingServer_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  CorrespondingServer_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* HeaderEx_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  HeaderEx_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ReportLoad_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ReportLoad_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AddressInfo_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AddressInfo_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AddressList_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AddressList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_commonlib_2fCommonLib_2eproto() {
  protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commonlib/CommonLib.proto");
  GOOGLE_CHECK(file != NULL);
  CorrespondingServer_descriptor_ = file->message_type(0);
  static const int CorrespondingServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrespondingServer, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrespondingServer, serverid_),
  };
  CorrespondingServer_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      CorrespondingServer_descriptor_,
      CorrespondingServer::default_instance_,
      CorrespondingServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrespondingServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrespondingServer, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(CorrespondingServer));
  HeaderEx_descriptor_ = file->message_type(1);
  static const int HeaderEx_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, servers_),
  };
  HeaderEx_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      HeaderEx_descriptor_,
      HeaderEx::default_instance_,
      HeaderEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderEx, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(HeaderEx));
  Hello_descriptor_ = file->message_type(2);
  static const int Hello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, my_listening_port_),
  };
  Hello_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  ReportLoad_descriptor_ = file->message_type(3);
  static const int ReportLoad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, load_),
  };
  ReportLoad_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ReportLoad_descriptor_,
      ReportLoad::default_instance_,
      ReportLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLoad, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportLoad));
  AddressInfo_descriptor_ = file->message_type(4);
  static const int AddressInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, servertype_),
  };
  AddressInfo_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AddressInfo_descriptor_,
      AddressInfo::default_instance_,
      AddressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressInfo, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressInfo));
  AddressList_descriptor_ = file->message_type(5);
  static const int AddressList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, addr_),
  };
  AddressList_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AddressList_descriptor_,
      AddressList::default_instance_,
      AddressList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressList, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AddressList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commonlib_2fCommonLib_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorrespondingServer_descriptor_, &CorrespondingServer::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeaderEx_descriptor_, &HeaderEx::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportLoad_descriptor_, &ReportLoad::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressInfo_descriptor_, &AddressInfo::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddressList_descriptor_, &AddressList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commonlib_2fCommonLib_2eproto() {
  delete CorrespondingServer::default_instance_;
  delete CorrespondingServer_reflection_;
  delete HeaderEx::default_instance_;
  delete HeaderEx_reflection_;
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete ReportLoad::default_instance_;
  delete ReportLoad_reflection_;
  delete AddressInfo::default_instance_;
  delete AddressInfo_reflection_;
  delete AddressList::default_instance_;
  delete AddressList_reflection_;
}

void protobuf_AddDesc_commonlib_2fCommonLib_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031commonlib/CommonLib.proto\022\006common\";\n\023C"
    "orrespondingServer\022\022\n\nservertype\030\001 \002(\r\022\020"
    "\n\010serverid\030\002 \002(\r\"E\n\010HeaderEx\022\013\n\003uid\030\001 \001("
    "\004\022,\n\007servers\030\002 \003(\0132\033.common.Correspondin"
    "gServer\"\"\n\005Hello\022\031\n\021my_listening_port\030\001 "
    "\002(\r\"\032\n\nReportLoad\022\014\n\004load\030\001 \002(\002\"M\n\013Addre"
    "ssInfo\022\n\n\002ip\030\001 \002(\007\022\014\n\004port\030\002 \002(\r\022\020\n\010serv"
    "erid\030\003 \002(\r\022\022\n\nservertype\030\004 \002(\r\"0\n\013Addres"
    "sList\022!\n\004addr\030\001 \003(\0132\023.common.AddressInfo", 360);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commonlib/CommonLib.proto", &protobuf_RegisterTypes);
  CorrespondingServer::default_instance_ = new CorrespondingServer();
  HeaderEx::default_instance_ = new HeaderEx();
  Hello::default_instance_ = new Hello();
  ReportLoad::default_instance_ = new ReportLoad();
  AddressInfo::default_instance_ = new AddressInfo();
  AddressList::default_instance_ = new AddressList();
  CorrespondingServer::default_instance_->InitAsDefaultInstance();
  HeaderEx::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  ReportLoad::default_instance_->InitAsDefaultInstance();
  AddressInfo::default_instance_->InitAsDefaultInstance();
  AddressList::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commonlib_2fCommonLib_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commonlib_2fCommonLib_2eproto {
  StaticDescriptorInitializer_commonlib_2fCommonLib_2eproto() {
    protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  }
} static_descriptor_initializer_commonlib_2fCommonLib_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CorrespondingServer::kServertypeFieldNumber;
const int CorrespondingServer::kServeridFieldNumber;
#endif  // !_MSC_VER

CorrespondingServer::CorrespondingServer()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.CorrespondingServer)
}

void CorrespondingServer::InitAsDefaultInstance() {
}

CorrespondingServer::CorrespondingServer(const CorrespondingServer& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.CorrespondingServer)
}

void CorrespondingServer::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorrespondingServer::~CorrespondingServer() {
  // @@protoc_insertion_point(destructor:common.CorrespondingServer)
  SharedDtor();
}

void CorrespondingServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CorrespondingServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* CorrespondingServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorrespondingServer_descriptor_;
}

const CorrespondingServer& CorrespondingServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

CorrespondingServer* CorrespondingServer::default_instance_ = NULL;

CorrespondingServer* CorrespondingServer::New() const {
  return new CorrespondingServer;
}

void CorrespondingServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CorrespondingServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(servertype_, serverid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorrespondingServer::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.CorrespondingServer)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 servertype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.CorrespondingServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.CorrespondingServer)
  return false;
#undef DO_
}

void CorrespondingServer::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.CorrespondingServer)
  // required uint32 servertype = 1;
  if (has_servertype()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servertype(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.CorrespondingServer)
}

::google_lalune::protobuf::uint8* CorrespondingServer::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.CorrespondingServer)
  // required uint32 servertype = 1;
  if (has_servertype()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servertype(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.CorrespondingServer)
  return target;
}

int CorrespondingServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 servertype = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorrespondingServer::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorrespondingServer* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const CorrespondingServer*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorrespondingServer::MergeFrom(const CorrespondingServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorrespondingServer::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorrespondingServer::CopyFrom(const CorrespondingServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrespondingServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CorrespondingServer::Swap(CorrespondingServer* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata CorrespondingServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = CorrespondingServer_descriptor_;
  metadata.reflection = CorrespondingServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeaderEx::kUidFieldNumber;
const int HeaderEx::kServersFieldNumber;
#endif  // !_MSC_VER

HeaderEx::HeaderEx()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.HeaderEx)
}

void HeaderEx::InitAsDefaultInstance() {
}

HeaderEx::HeaderEx(const HeaderEx& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.HeaderEx)
}

void HeaderEx::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeaderEx::~HeaderEx() {
  // @@protoc_insertion_point(destructor:common.HeaderEx)
  SharedDtor();
}

void HeaderEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeaderEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* HeaderEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeaderEx_descriptor_;
}

const HeaderEx& HeaderEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

HeaderEx* HeaderEx::default_instance_ = NULL;

HeaderEx* HeaderEx::New() const {
  return new HeaderEx;
}

void HeaderEx::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeaderEx::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.HeaderEx)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        break;
      }

      // repeated .common.CorrespondingServer servers = 2;
      case 2: {
        if (tag == 18) {
         parse_servers:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.HeaderEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.HeaderEx)
  return false;
#undef DO_
}

void HeaderEx::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.HeaderEx)
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .common.CorrespondingServer servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.HeaderEx)
}

::google_lalune::protobuf::uint8* HeaderEx::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.HeaderEx)
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .common.CorrespondingServer servers = 2;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.HeaderEx)
  return target;
}

int HeaderEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .common.CorrespondingServer servers = 2;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderEx::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeaderEx* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const HeaderEx*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeaderEx::MergeFrom(const HeaderEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeaderEx::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderEx::CopyFrom(const HeaderEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderEx::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void HeaderEx::Swap(HeaderEx* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata HeaderEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = HeaderEx_descriptor_;
  metadata.reflection = HeaderEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kMyListeningPortFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Hello)
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.Hello)
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  my_listening_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:common.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  my_listening_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Hello)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 my_listening_port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_listening_port_)));
          set_has_my_listening_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Hello)
  // required uint32 my_listening_port = 1;
  if (has_my_listening_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->my_listening_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.Hello)
}

::google_lalune::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Hello)
  // required uint32 my_listening_port = 1;
  if (has_my_listening_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->my_listening_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Hello)
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 my_listening_port = 1;
    if (has_my_listening_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_listening_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_listening_port()) {
      set_my_listening_port(from.my_listening_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(my_listening_port_, other->my_listening_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportLoad::kLoadFieldNumber;
#endif  // !_MSC_VER

ReportLoad::ReportLoad()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ReportLoad)
}

void ReportLoad::InitAsDefaultInstance() {
}

ReportLoad::ReportLoad(const ReportLoad& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.ReportLoad)
}

void ReportLoad::SharedCtor() {
  _cached_size_ = 0;
  load_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportLoad::~ReportLoad() {
  // @@protoc_insertion_point(destructor:common.ReportLoad)
  SharedDtor();
}

void ReportLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ReportLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportLoad_descriptor_;
}

const ReportLoad& ReportLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

ReportLoad* ReportLoad::default_instance_ = NULL;

ReportLoad* ReportLoad::New() const {
  return new ReportLoad;
}

void ReportLoad::Clear() {
  load_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportLoad::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ReportLoad)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float load = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ReportLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ReportLoad)
  return false;
#undef DO_
}

void ReportLoad::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ReportLoad)
  // required float load = 1;
  if (has_load()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteFloat(1, this->load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.ReportLoad)
}

::google_lalune::protobuf::uint8* ReportLoad::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ReportLoad)
  // required float load = 1;
  if (has_load()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ReportLoad)
  return target;
}

int ReportLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float load = 1;
    if (has_load()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLoad::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportLoad* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ReportLoad*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportLoad::MergeFrom(const ReportLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load()) {
      set_load(from.load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportLoad::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLoad::CopyFrom(const ReportLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportLoad::Swap(ReportLoad* other) {
  if (other != this) {
    std::swap(load_, other->load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ReportLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ReportLoad_descriptor_;
  metadata.reflection = ReportLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressInfo::kIpFieldNumber;
const int AddressInfo::kPortFieldNumber;
const int AddressInfo::kServeridFieldNumber;
const int AddressInfo::kServertypeFieldNumber;
#endif  // !_MSC_VER

AddressInfo::AddressInfo()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.AddressInfo)
}

void AddressInfo::InitAsDefaultInstance() {
}

AddressInfo::AddressInfo(const AddressInfo& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.AddressInfo)
}

void AddressInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  port_ = 0u;
  serverid_ = 0u;
  servertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressInfo::~AddressInfo() {
  // @@protoc_insertion_point(destructor:common.AddressInfo)
  SharedDtor();
}

void AddressInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AddressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressInfo_descriptor_;
}

const AddressInfo& AddressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

AddressInfo* AddressInfo::default_instance_ = NULL;

AddressInfo* AddressInfo::New() const {
  return new AddressInfo;
}

void AddressInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddressInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, servertype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressInfo::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.AddressInfo)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ip = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_serverid:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_servertype;
        break;
      }

      // required uint32 servertype = 4;
      case 4: {
        if (tag == 32) {
         parse_servertype:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.AddressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.AddressInfo)
  return false;
#undef DO_
}

void AddressInfo::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.AddressInfo)
  // required fixed32 ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required uint32 servertype = 4;
  if (has_servertype()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.AddressInfo)
}

::google_lalune::protobuf::uint8* AddressInfo::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.AddressInfo)
  // required fixed32 ip = 1;
  if (has_ip()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required uint32 servertype = 4;
  if (has_servertype()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.AddressInfo)
  return target;
}

int AddressInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 servertype = 4;
    if (has_servertype()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressInfo::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressInfo* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AddressInfo*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressInfo::MergeFrom(const AddressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressInfo::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressInfo::CopyFrom(const AddressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AddressInfo::Swap(AddressInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AddressInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AddressInfo_descriptor_;
  metadata.reflection = AddressInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddressList::kAddrFieldNumber;
#endif  // !_MSC_VER

AddressList::AddressList()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.AddressList)
}

void AddressList::InitAsDefaultInstance() {
}

AddressList::AddressList(const AddressList& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.AddressList)
}

void AddressList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressList::~AddressList() {
  // @@protoc_insertion_point(destructor:common.AddressList)
  SharedDtor();
}

void AddressList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AddressList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressList_descriptor_;
}

const AddressList& AddressList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commonlib_2fCommonLib_2eproto();
  return *default_instance_;
}

AddressList* AddressList::default_instance_ = NULL;

AddressList* AddressList::New() const {
  return new AddressList;
}

void AddressList::Clear() {
  addr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddressList::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.AddressList)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.AddressInfo addr = 1;
      case 1: {
        if (tag == 10) {
         parse_addr:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_addr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.AddressList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.AddressList)
  return false;
#undef DO_
}

void AddressList::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.AddressList)
  // repeated .common.AddressInfo addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.AddressList)
}

::google_lalune::protobuf::uint8* AddressList::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.AddressList)
  // repeated .common.AddressInfo addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.AddressList)
  return target;
}

int AddressList::ByteSize() const {
  int total_size = 0;

  // repeated .common.AddressInfo addr = 1;
  total_size += 1 * this->addr_size();
  for (int i = 0; i < this->addr_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressList::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddressList* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AddressList*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressList::MergeFrom(const AddressList& from) {
  GOOGLE_CHECK_NE(&from, this);
  addr_.MergeFrom(from.addr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddressList::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressList::CopyFrom(const AddressList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressList::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->addr())) return false;
  return true;
}

void AddressList::Swap(AddressList* other) {
  if (other != this) {
    addr_.Swap(&other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AddressList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AddressList_descriptor_;
  metadata.reflection = AddressList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)
